# ═══════════════════════════════════════════════════════════
# 🤖 GITHUB ACTIONS: Automated Deployment Pipeline
# ═══════════════════════════════════════════════════════════
# This workflow automatically deploys your website to AWS when you push code

name: Deploy Daily Deen to AWS

# 🎯 TRIGGER: When does this run?
on:
  push:
    branches: ["main"] # Runs when you push to the "main" branch
  workflow_dispatch: # Also allows manual trigger from GitHub UI

# 🔐 PERMISSIONS: What can this workflow do?
permissions:
  contents: read # Read repository files

# 🏗️ JOBS: The actual work to be done
jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest # ✅ Runs on Linux (Ubuntu) - Ansible works perfectly here!

    steps:
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 1: Get Your Code
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        # What this does: Downloads your project files from GitHub

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 2: Set Up AWS Access
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # These secrets are stored in GitHub (we'll add them next!)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        # What this does: Logs into AWS using your credentials (stored securely)

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 3: Install Terraform
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false # Allows us to capture outputs easily
        # What this does: Installs Terraform on the GitHub runner

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 4: Build AWS Infrastructure
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🚀 Terraform Init
        run: terraform init
        # What this does: Prepares Terraform (downloads AWS provider)

      - name: � Import Existing Resources (if they exist)
        run: |
          # Try to import security group (ignore error if doesn't exist)
          terraform import aws_security_group.web_sg daily-deen-web-sg || true

          # Try to import key pair (ignore error if doesn't exist)
          terraform import aws_key_pair.deployer daily-deen-deployment-key || true

          # Try to import EC2 instance by tag (ignore error if doesn't exist)
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Daily Deen Web Server" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text 2>/dev/null || echo "")
          if [ "$INSTANCE_ID" != "" ] && [ "$INSTANCE_ID" != "None" ]; then
            terraform import aws_instance.web_server $INSTANCE_ID || true
          fi
        continue-on-error: true
        # What this does: Imports existing AWS resources into Terraform state

      - name: �📋 Terraform Plan
        run: |
          terraform plan \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="my_ip=${{ secrets.MY_IP_ADDRESS }}"
        # What this does: Shows what Terraform will create (preview)

      - name: ✅ Terraform Apply
        id: terraform
        run: |
          terraform apply -auto-approve \
            -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
            -var="my_ip=${{ secrets.MY_IP_ADDRESS }}"

          # Capture outputs for later steps
          echo "server_ip=$(terraform output -raw server_public_ip)" >> $GITHUB_OUTPUT
          echo "server_dns=$(terraform output -raw server_public_dns)" >> $GITHUB_OUTPUT
        # What this does: Creates EC2 server, security groups, SSH key in AWS

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 5: Wait for Server to Be Ready
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: ⏳ Wait for EC2 to be ready
        run: |
          echo "Waiting 120 seconds for EC2 instance to fully boot..."
          sleep 120
        # What this does: Gives the server time to boot up (120 seconds for Amazon Linux 2023)

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 6: Set Up Ansible
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🔧 Setup Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible
        # What this does: Installs Ansible on the GitHub runner

      - name: 🔑 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/daily-deen-key
          chmod 600 ~/.ssh/daily-deen-key

          # Disable strict host key checking (for automation)
          cat >> ~/.ssh/config <<EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
        # What this does: Sets up SSH key so Ansible can connect to EC2

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 7: Create Ansible Inventory
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 📝 Create Ansible inventory
        run: |
          cat > inventory.ini <<EOF
          [webserver]
          ${{ steps.terraform.outputs.server_dns }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/daily-deen-key
          EOF
          cat inventory.ini
        # What this does: Tells Ansible where the server is and how to connect

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 8: Deploy with Ansible
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🚀 Run Ansible Playbook
        run: |
          ansible-playbook -i inventory.ini playbook.yml
        # What this does: Runs the playbook to deploy Docker + your website

      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      # STEP 9: Show Success Message
      # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      - name: 🎉 Deployment Complete!
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ Deployment successful!"
          echo "🌐 Your website is live at:"
          echo "   http://${{ steps.terraform.outputs.server_ip }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
